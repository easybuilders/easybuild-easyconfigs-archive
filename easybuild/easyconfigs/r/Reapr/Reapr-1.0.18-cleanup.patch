This patch makes Reapr compatible with EasyBuild.

Henrik R. Nagel, 20191115
diff -ruN Reapr_1.0.18.orig/Makefile Reapr_1.0.18/Makefile
--- Reapr_1.0.18.orig/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ Reapr_1.0.18/Makefile	2019-11-13 12:17:03.000000000 +0100
@@ -0,0 +1,8 @@
+all:
+	cd third_party/tabix ; make
+	cd third_party/snpomatic ; make
+	mkdir -p bin/tabix ; cp third_party/tabix/tabix third_party/tabix/bgzip third_party/tabix/tabix++ bin/tabix
+	mkdir bin/snpomatic ; cp third_party/snpomatic/findknownsnps bin/snpomatic
+	cp third_party/smalt_x86_64 bin/smalt
+	cd src ; make
+	cd bin ; ln -s reapr.pl reapr
diff -ruN Reapr_1.0.18.orig/src/Makefile Reapr_1.0.18/src/Makefile
--- Reapr_1.0.18.orig/src/Makefile	2014-03-13 11:15:43.000000000 +0100
+++ Reapr_1.0.18/src/Makefile	2019-11-13 12:38:07.000000000 +0100
@@ -1,6 +1,5 @@
-BAMTOOLS_ROOT = $(CURDIR)/bamtools
 CC = g++
-CFLAGS = -Wl,-rpath,$(BAMTOOLS_ROOT)/lib  -Wall -O3  -I $(BAMTOOLS_ROOT)/include -L $(BAMTOOLS_ROOT)/lib
+CFLAGS = -Wl,-rpath,$(EBROOTBAMTOOLS)/lib  -Wall -O3  -I $(EBROOTBAMTOOLS)/include/bamtools -L $(EBROOTBAMTOOLS)/lib
 TABIX = tabix/tabix.o  -L./tabix -ltabix -lz
 STATS_OBJS =  trianglePlot.o coveragePlot.o fasta.o histogram.o utils.o
 SCORE_OBJS = errorWindow.o utils.o histogram.o
@@ -18,6 +17,7 @@
 EXECUTABLES = task_score task_stats task_break bam2fragCov bam2insert bam2fcdEstimate make_plots fa2gaps fa2gc scaff2contig n50 task_gapresize task_fcdrate bam2perfect
 
 all: $(EXECUTABLES)
+	cp $(EXECUTABLES) *.pl ../bin
 
 errorWindow.o: errorWindow.cpp
 	$(CC) $(CFLAGS) -c errorWindow.cpp
diff -ruN Reapr_1.0.18.orig/src/task_perfectfrombam.pl Reapr_1.0.18/src/task_perfectfrombam.pl
--- Reapr_1.0.18.orig/src/task_perfectfrombam.pl	2013-04-05 14:22:12.000000000 +0200
+++ Reapr_1.0.18/src/task_perfectfrombam.pl	2019-11-13 12:02:08.000000000 +0100
@@ -62,7 +62,7 @@
 my $ERROR_PREFIX = '[REAPR perfectfrombam]';
 my $perfect_bam = "$out_prefix.tmp.perfect.bam";
 my $repetitive_bam = "$out_prefix.tmp.repetitive.bam";
-my $samtools = File::Spec->catfile($scriptdir, 'samtools');
+# my $samtools = File::Spec->catfile($scriptdir, 'samtools');
 my %seq_lengths;
 my %used_seqs;
 my $hist_file = "$out_prefix.hist";
@@ -75,7 +75,7 @@
 system_call("$bam2perfect $bam_in $out_prefix.tmp $min_insert $max_insert $max_repeat_map_qual $min_perfect_map_qual $min_align_score");
 
 # Get sequence length info from bam header
-open F, "$samtools view -H $bam_in |" or die "$ERROR_PREFIX Error reading header of '$bam_in'";
+open F, "samtools view -H $bam_in |" or die "$ERROR_PREFIX Error reading header of '$bam_in'";
 while (<F>) {
     if (/^\@SQ/) {
         my $id;
@@ -99,7 +99,7 @@
 
 # run samtools mpileup on the perfect coverage BAM, writing the coverage to a new file.
 # Have to be careful because mpileup only reports bases with != coverage.
-open FIN, "$samtools mpileup $perfect_bam | cut -f 1,2,4|" or die "$ERROR_PREFIX Error running samtools mpileup on '$perfect_bam'";
+open FIN, "samtools mpileup $perfect_bam | cut -f 1,2,4|" or die "$ERROR_PREFIX Error running samtools mpileup on '$perfect_bam'";
 open FOUT, "| $bgzip -c > $perfect_cov_out" or die "$ERROR_PREFIX Error opening '$perfect_cov_out'";
 my $current_ref = "";
 my $current_pos = 1;
@@ -164,7 +164,7 @@
 
 # get the regions of nonzero repetitive coverage from the
 # repetitive BAM
-open FIN, "$samtools mpileup -A -C 0  $repetitive_bam | cut -f 1,2,4|" or die "$ERROR_PREFIX Error running samtools mpileup on '$repetitive_bam'";
+open FIN, "samtools mpileup -A -C 0  $repetitive_bam | cut -f 1,2,4|" or die "$ERROR_PREFIX Error running samtools mpileup on '$repetitive_bam'";
 open FOUT, "| $bgzip -c > $repetitive_regions_out" or die "$ERROR_PREFIX Error opening '$repetitive_regions_out'";
 $current_ref = "";
 my $interval_start = -1;
diff -ruN Reapr_1.0.18.orig/src/task_perfectmap.pl Reapr_1.0.18/src/task_perfectmap.pl
--- Reapr_1.0.18.orig/src/task_perfectmap.pl	2012-11-15 17:27:30.000000000 +0100
+++ Reapr_1.0.18/src/task_perfectmap.pl	2019-11-13 12:03:01.000000000 +0100
@@ -45,7 +45,7 @@
 my $tmp_bin_single_match = "$tmp_bin\_single_match.fastq";
 my $tabix = File::Spec->catfile($scriptdir, 'tabix/tabix');
 my $bgzip = File::Spec->catfile($scriptdir, 'tabix/bgzip');
-my $samtools = File::Spec->catfile($scriptdir, 'samtools');
+# my $samtools = File::Spec->catfile($scriptdir, 'samtools');
 my $all_bases_outfile = "$preout.perfect_cov.gz";
 my $hist_outfile = "$preout.hist";
 my @coverage = (0) x 101;
@@ -56,7 +56,7 @@
 
 # we want an indexed fasta file
 unless (-e "$ref_fa.fai"){
-    system_call("$samtools faidx $ref_fa");
+    system_call("samtools faidx $ref_fa");
 }
 
 # snp-o-matic can't take gzipped reads, so decompress them first if necessary
diff -ruN Reapr_1.0.18.orig/src/task_plots.pl Reapr_1.0.18/src/task_plots.pl
--- Reapr_1.0.18.orig/src/task_plots.pl	2013-03-08 13:58:00.000000000 +0100
+++ Reapr_1.0.18/src/task_plots.pl	2019-11-13 12:03:19.000000000 +0100
@@ -52,7 +52,7 @@
 
 my $tabix = File::Spec->catfile($scriptdir, 'tabix/tabix');
 my $bgzip = File::Spec->catfile($scriptdir, 'tabix/bgzip');
-my $samtools = File::Spec->catfile($scriptdir, 'samtools');
+# my $samtools = File::Spec->catfile($scriptdir, 'samtools');
 my @plot_list = ('frag_cov', 'frag_cov_cor', 'read_cov', 'read_ratio_f', 'read_ratio_r', 'clip', 'FCD_err');
 my @file_list;
 my $fa_out = "$outprefix.ref.fa";
@@ -85,7 +85,7 @@
 if (-e $perfect_plot) {push @file_list, $perfect_plot};
 
 # get the reference sequence from the fasta file
-system_call("$samtools faidx $ref_fa '$ref_id' > $fa_out");
+system_call("samtools faidx $ref_fa '$ref_id' > $fa_out");
 
 # bgzip the plots
 foreach (@file_list) {
diff -ruN Reapr_1.0.18.orig/src/task_preprocess.pl Reapr_1.0.18/src/task_preprocess.pl
--- Reapr_1.0.18.orig/src/task_preprocess.pl	2014-07-18 13:05:19.000000000 +0200
+++ Reapr_1.0.18/src/task_preprocess.pl	2019-11-13 12:03:35.000000000 +0100
@@ -54,7 +54,7 @@
 my $r_script = File::Spec->catfile($sample_dir, 'gc_vs_cov.R');
 my $tabix = File::Spec->catfile($scriptdir, 'tabix/tabix');
 my $bgzip = File::Spec->catfile($scriptdir, 'tabix/bgzip');
-my $samtools = File::Spec->catfile($scriptdir, 'samtools');
+# my $samtools = File::Spec->catfile($scriptdir, 'samtools');
 
 # make directory and soft links to required files
 $fasta_in = File::Spec->rel2abs($fasta_in);
@@ -76,14 +76,14 @@
     symlink "$fasta_in.fai", "$ref.fai";
 }
 else {
-    system_call("$samtools faidx $ref");
+    system_call("samtools faidx $ref");
 }
 
 if (-e "$bam_in.bai") {
     symlink "$bam_in.bai", "$bam.bai";
 }
 else {
-    system_call("$samtools index $bam");
+    system_call("samtools index $bam");
 }
 
 # make gaps file of gaps in reference
diff -ruN Reapr_1.0.18.orig/src/task_seqrename.pl Reapr_1.0.18/src/task_seqrename.pl
--- Reapr_1.0.18.orig/src/task_seqrename.pl	2014-02-24 17:35:11.000000000 +0100
+++ Reapr_1.0.18/src/task_seqrename.pl	2019-11-13 12:03:52.000000000 +0100
@@ -7,7 +7,7 @@
 use Getopt::Long;
 
 my ($scriptname, $scriptdir) = fileparse($0);
-my $samtools = File::Spec->catfile($scriptdir, 'samtools');
+# my $samtools = File::Spec->catfile($scriptdir, 'samtools');
 my %options;
 my $usage = qq/<rename file> <in.bam> <out.bam>
 
@@ -52,8 +52,8 @@
 $old2new{'='} = '=';
 
 # make the new bam file
-open FIN, "$samtools view -h $bam_in|" or die $!;
-open FOUT, "| $samtools view -bS - > $bam_out" or die $!;
+open FIN, "samtools view -h $bam_in|" or die $!;
+open FOUT, "| samtools view -bS - > $bam_out" or die $!;
 
 while (<FIN>) {
     chomp;
diff -ruN Reapr_1.0.18.orig/src/task_smaltmap.pl Reapr_1.0.18/src/task_smaltmap.pl
--- Reapr_1.0.18.orig/src/task_smaltmap.pl	2014-03-13 09:31:14.000000000 +0100
+++ Reapr_1.0.18/src/task_smaltmap.pl	2019-11-13 12:04:27.000000000 +0100
@@ -77,7 +77,7 @@
 my $reads_2 = $ARGV[2];
 my $final_bam = $ARGV[3];
 my $ERROR_PREFIX = '[REAPR smaltmap]';
-my $samtools = File::Spec->catfile($scriptdir, 'samtools');
+# my $samtools = File::Spec->catfile($scriptdir, 'samtools');
 my $smalt = File::Spec->catfile($scriptdir, 'smalt');
 my $tmp_prefix = "$final_bam.tmp.$$.smaltmap";
 my $smalt_index = "$tmp_prefix.smalt_index";
@@ -115,7 +115,7 @@
 # already). The .fai file would get made in the samtools view -T .. call
 # anyway.
 unless (-e "$assembly.fai") {
-    my $cmd = "$samtools faidx $assembly";
+    my $cmd = "samtools faidx $assembly";
     if (system($cmd)) {
         print STDERR "$ERROR_PREFIX Error in system call:\n$cmd\n\n";
         print STDERR "This means samtools is unhappy with the assembly
@@ -152,24 +152,24 @@
 
 push @commands, "$smalt map -r 0 -x -y $options{y} $n_option $m_option -g $smalt_sample -f samsoft $smalt_index $reads_1 $reads_2"
                . q{ | awk '$1!~/^#/'  }  # SMALT writes some stuff to do with the sampling to stdout
-               . " | $samtools view -S -T $assembly -b - > $raw_bam";
+               . " | samtools view -S -T $assembly -b - > $raw_bam";
 
 # sort the bam by coordinate
-push @commands, "$samtools sort $raw_bam $raw_bam.sort";
+push @commands, "samtools sort $raw_bam $raw_bam.sort";
 
 # remove duplicates
-push @commands, "$samtools rmdup $raw_bam.sort.bam $rmdup_bam";
+push @commands, "samtools rmdup $raw_bam.sort.bam $rmdup_bam";
 
 # Bamtools needs the @HD line of the BAM to be present.
 # So need to make new header for the BAM
 
 # need to get tab characters printed properly. Can't rely on echo -e working, so pipe through awk
 push @commands, q~echo "@HD VN:1.0 SO:coordinate" | awk '{OFS="\t"; $1=$1; print}' > ~ . "$header";
-push @commands, "$samtools view -H $rmdup_bam >> $header";
-push @commands, "$samtools reheader $header $rmdup_bam > $final_bam";
+push @commands, "samtools view -H $rmdup_bam >> $header";
+push @commands, "samtools reheader $header $rmdup_bam > $final_bam";
 
 # index the BAM
-push @commands, "$samtools index $final_bam";
+push @commands, "samtools index $final_bam";
 
 # clean up temp files
 push @commands, "rm $tmp_prefix.*";
